// Media query used to create responsive classes
@mixin pf-media-query($point) {
  @if $point == "" or not $point or $point == "base" {
    @content;
  }

  @else if $point == "sm" {
    @media screen and (min-width: $pf-global--breakpoint--sm) {
      @content;
    }
  }

  @else if $point == "md" {
    @media screen and (min-width: $pf-global--breakpoint--md) {
      @content;
    }
  }

  @else if $point == "lg" {
    @media screen and (min-width: $pf-global--breakpoint--lg) {
      @content;
    }
  }

  @else if $point == "xl" {
    @media screen and (min-width: $pf-global--breakpoint--xl) {
      @content;
    }
  }

  @else if $point == "2xl" {
    @media screen and (min-width: $pf-global--breakpoint--2xl) {
      @content;
    }
  }
}

// Create single prop / value classes, optionally add responsive suffix
// @group mixins
// @moduleType mixin
// @parameter: {Suffix} xs, sm, md, lg, xl, base or null
// @usage: @include pf-utility-builder(class-name, base sm md lg xl);
// ===============================================================================================

// ## Example sass map:
// this must be used when order matters or a cluster of similar utilties need to overwrite each other

// Justify content options
// $pf-u-flex-options: (
//   flex-none:  (flex none),
//   flex-1:     (flex 1)
// );

// non-responsive, base only                @include pf-utility-builder($sass-map)
// responsive, including all breakpoints    @include pf-utility-builder($sass-map, $pf-global--breakpoint-list)

// ## Passing individual utilities values
// ===============================================================================================
// Example individual utility:
// @include pf-utility-builder(flex-fill flex "1 1 auto", $pf-global--breakpoint-list);

@mixin pf-utility-builder($props, $breakpoints: null) {
  // if $class-name is a map

  // stylelint-disable
  @if type-of($props) == map {
    @each $class, $val in $props {
      $property: nth($val, 1);
      $value: #{nth($val, 2) !important};

      .pf-u-#{$class} {
        #{$property}: #{$value};
      }
    }

    // if breakpoints are requested
    @if $breakpoints != null {
      @each $breakpoint in $breakpoints {
        $suffix: -on-#{$breakpoint};

        @include pf-media-query($breakpoint) {
          @each $class, $val in $props {
            $property: nth($val, 1);
            $value: #{nth($val, 2) !important};

            .pf-u-#{$class}#{$suffix} {
              #{$property}: #{$value};
            }
          }
        }
      }
    }
  }

  @else if type-of($props) == list {
    $class: nth($props, 1);
    $property: nth($props, 2);
    $value: nth($props, 3) !important;

    .pf-u-#{$class} {
      #{$property}: #{$value};
    }

    @if $breakpoints != null {
      @each $breakpoint in $breakpoints {
        $suffix: -on-#{$breakpoint};

        .pf-u-#{$class}#{$suffix} {
          @include pf-media-query($breakpoint) {
            #{$property}: #{$value};
          }
        }
      }
    }
  }
}
// stylelint-enable

@mixin pf-u-screen-reader {
  position: fixed;
  top: 0;
  left: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin pf-u-visible {
  position: static;
  overflow: visible;
  clip: auto;
  white-space: normal;
  border: inherit;
}

@mixin pf-t-light($color: "--pf-global--Color--100") {
  color: var(#{$color});

  @extend %pf-t-light;
}

@mixin pf-t-dark($color: "--pf-global--Color--100") {
  color: var(#{$color});

  @extend %pf-t-dark;
}

@mixin pf-text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin pf-line-clamp($line-clamp-val: 1) {
  // stylelint-disable
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: #{$line-clamp-val};
  // stylelint-enable
  overflow: hidden;
}

@mixin pf-overflow-hide-scroll {
  &::-webkit-scrollbar {
    display: none;
  } // hides scrollbars in Chrome

  scrollbar-width: none; // hides scrollbars in Firefox 64 and up
  -ms-overflow-style: -ms-autohiding-scrollbar; // auto hides scrollbars in Edge
}

@mixin pf-hidden-visible($val: "block") {
  // stylelint-disable-next-line
  --pf-hidden-visible--visible--Display: #{$val};

  @extend %pf-hidden-visible;
}

@mixin pf-m-overpass-font {
  .pf-m-overpass-font {
    @content;
  }
}

// Apply media query if value is passed
@mixin pf-apply-breakpoint($breakpoint) {
  @if ($breakpoint == "null" or $breakpoint == "base" or $breakpoint == "") {
    @content;
  }

  @else {
    $breakpoint: pf-breakpoint-value($breakpoint);

    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin pf-emit-properties($map) {
  @each $prop, $value in $map {
    #{$value}: #{$prop};
  }
}

// Animate tab focus removal
@mixin pf-animate-remove-tab-focus($element, $delay: $pf-global--TransitionDuration) {
  @keyframes pf-remove-tab-focus {
    to {
      visibility: hidden;
    }
  }

  #{$element}[hidden] {
    animation-name: pf-remove-tab-focus;
    animation-delay: #{$delay};
    animation-fill-mode: forwards;
  }
}

// Build variable stack
@mixin pf-build-css-variable-stack($prop, $css-var, $breakpoint-map: $pf-global--breakpoint-map, $important: false) {
  $list: ();

  @each $breakpoint, $breakpoint-value in $breakpoint-map {
    $variable-list: ();

    // Build variable list
    @if $breakpoint != "base" {
      $list: append($list, $css-var + "-on-" + $breakpoint);
    } @else {
      $list: append($list, $css-var);
    }

    // Construct variable stack
    @each $list-item in $list {
      @if length($variable-list) == 0 {
        $variable-list: var(#{$list-item});
      } @else {
        $variable-list: var(#{$list-item}, $variable-list);
      }
    }

    // Assign variable stack to $prop
    @include pf-apply-breakpoint($breakpoint) {
      @if $important == true {
        // stylelint-disable declaration-no-important
        #{$prop}: #{$variable-list} !important;
        // stylelint-enable
      } @else {
        #{$prop}: #{$variable-list};
      }
    }
  }
}

@mixin pf-resize-observer-breakpoint($component-breakpoint, $namespace: &, $page-breakpoint-list: $pf-global--breakpoint-list) {
  $index: index($page-breakpoint-list, $component-breakpoint);
  $breakpoints: ();
  $mq-namespace: '.pf-c-page :where(:not(.pf-m-resize-observer) ' + #{$namespace} + ')';

  @for $i from $index through length($page-breakpoint-list) {
    $breakpoints: append($breakpoints, '.pf-m-breakpoint-' + #{nth($page-breakpoint-list, $i)}, $separator: comma);
  }

  $namespace: '.pf-c-page :where(.pf-m-resize-observer:is(' + #{$breakpoints} + ') ' + #{$namespace} + ')';

  @debug #{$namespace};

  @at-root #{$namespace} {
    @content;
  }

  @at-root #{$mq-namespace} {
    @include pf-apply-breakpoint($component-breakpoint) {
      @content;
    }
  }
}

// Create a resuable mixin to defines component variants
// Example output: .pf-component{__element}{--Property} to pf-c-component--m-{modifier}{__element}{--Property}
// @group mixins
// @moduleType mixin
// @parameter: $sass-map(), $variant-title: "string"
// @usage: @include pf-create-variant-mixin($source-map(), $variant-title: "display-inline");
// notes: Only the desired name of the variant should be passed to $variant-title. `--m-` is automatically applied
// ===============================================================================================
@mixin pf-create-variant-mixin($map: (), $variant-title) {
  $namespace: map-get($map, "namespace");
  $layout-map: map-get($map, "layouts");
  $layout-object: map-get($layout-map, $variant-title);
  $layout-settings: ();
  $layout-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "--";
  $property-root: "--" + #{$namespace} + "--";
  $child-root: "";
  $element-root: "";

  @each $child, $item in $layout-object {
    // if key is not root, don't add the child selector
    @if $child == "root" {
      $child-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "--";
      $element-root: "--" + #{$namespace} + "--";
    }
    // if key has a value other than root, add it to the selector
    @else {
      $child-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "__" + #{$child} + "--";
      $element-root: "--" + #{$namespace} + "__" + #{$child} + "--";
    }

    @each $property, $value in $item {
      // convert property to pf variable extension (e.g. MarginRight)
      $pf-var-extension: pascalize($property);

      // construct new variable
      $pf-variant-var: #{$child-root}#{$pf-var-extension};

      // construct existing variable
      $pf-original-var: #{$element-root}#{$pf-var-extension};

      // assign existing variable the variant value
      #{$pf-original-var}: var(#{$pf-variant-var});
    }
  }
}

// create a resuable mixin that redefines variant variables
// from pf-component{__element}{--Property} to pf-c-component--m-modifier{__element}{--Property}
@mixin pf-create-variant-css-variables($map: (), $variant-title) {
  $namespace: map-get($map, "namespace");
  $layout-map: map-get($map, "layouts");
  $layout-object: map-get($layout-map, $variant-title);
  $layout-settings: ();
  $layout-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "--";
  $property-root: "--" + #{$namespace} + "--";
  $child-root: "";
  $element-root: "";

  @each $child, $item in $layout-object {
    // if key is not root, don't add the child selector
    @if $child == "root" {
      $child-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "--";
      $element-root: "--" + #{$namespace} + "--";
    }
    // if key has a value other than root, add it to the selector
    @else {
      $child-root: "--" + #{$namespace} + "--m-" + #{$variant-title} + "__" + #{$child} + "--";
      $element-root: "--" + #{$namespace} + "__" + #{$child} + "--";
    }

    @each $property, $value in $item {
      // convert property to pf variable extension (e.g. MarginRight)
      $pf-var-extension: pascalize($property);

      // construct new variable
      $pf-variant-var: #{$child-root}#{$pf-var-extension};

      // construct existing variable
      $pf-original-var: #{$element-root}#{$pf-var-extension};

      // variant variable initialization
      #{$pf-variant-var}: #{$value};
    }
  }

  @content;
}
