@import "./flex-maps";
@import "./flex-mixins";

.pf-l-flex {
  // Row / col
  --pf-l-flex--AlignItems--horizontal: baseline;
  --pf-l-flex--AlignItems--vertical: stretch;

  // Base
  --pf-l-flex--Display: flex;
  --pf-l-flex--Direction: row;
  --pf-l-flex--FlexWrap: wrap;
  --pf-l-flex--AlignItems: var(--pf-l-flex--AlignItems--horizontal); // set default to baseline
  --pf-l-flex--AlignSelf: auto;
  --pf-l-flex--JustifyContent: flex-start;
  --pf-l-flex--AlignContent: normal;
  --pf-l-flex--item--Order: 0;
  --pf-l-flex--m-row--AlignItems: var(--pf-l-flex--AlignItems--horizontal); // remove at breaking change
  --pf-l-flex--m-column--AlignItems: var(--pf-l-flex--AlignItems--vertical); // remove at breaking change
  --pf-l-flex--m-row-reverse--AlignItems: var(--pf-l-flex--AlignItems--horizontal); // remove at breaking change

  // Default values: these get reset based on modifier usage
  --pf-l-flex--spacer-base: var(--pf-global--spacer--md);
  --pf-l-flex--spacer: var(--pf-l-flex--spacer-base);

  // Gap base values
  --pf-l-flex--RowGap--base: var(--pf-global--spacer--md);
  --pf-l-flex--ColumnGap--base: var(--pf-global--spacer--md);

  // Gap values
  --pf-l-flex--RowGap: 0;
  --pf-l-flex--ColumnGap: 0;
  --pf-l-flex--Gap: var(--pf-l-flex--RowGap) var(--pf-l-flex--ColumnGap);

  // Emit spacer css variables that map to requested spacer values
  @include pf-emit-properties($pf-l-flex--variable-map);

  display: var(--pf-l-flex--Display);
  flex-direction: var(--pf-l-flex--Direction);
  flex-wrap: var(--pf-l-flex--FlexWrap);
  align-items: var(--pf-l-flex--AlignItems);
  align-self: var(--pf-l-flex--AlignSelf);
  justify-content: var(--pf-l-flex--JustifyContent);
  align-content: var(--pf-l-flex--AlignContent);
  gap: var(--pf-l-flex--Gap);

  &:last-child {
    --pf-l-flex--spacer: 0;
  }

  // Include base modifiers, with no breakpoints
  // &.pf-m-flex { @include pf-l-flex--m-flex; }
  @include pf-l-flex--m-flex;
  @include pf-l-flex--m-inline-flex;
  @include pf-l-flex--m-column;
  @include pf-l-flex--m-column-reverse;
  @include pf-l-flex--m-row;
  @include pf-l-flex--m-row-reverse;
  @include pf-l-flex--m-nowrap;

  // Justify content
  @include pf-l-flex--m-justify-content-flex-start;
  @include pf-l-flex--m-justify-content-flex-end;
  @include pf-l-flex--m-justify-content-center;
  @include pf-l-flex--m-justify-content-space-between;
  @include pf-l-flex--m-justify-content-space-around;
  @include pf-l-flex--m-justify-content-space-evenly;

  // Align items
  @include pf-l-flex--m-align-items-flex-start;
  @include pf-l-flex--m-align-items-flex-end;
  @include pf-l-flex--m-align-items-center;
  @include pf-l-flex--m-align-items-stretch;
  @include pf-l-flex--m-align-items-baseline;

  // Align content
  @include pf-l-flex--m-align-content-flex-start;
  @include pf-l-flex--m-align-content-flex-end;
  @include pf-l-flex--m-align-content-center;
  @include pf-l-flex--m-align-content-stretch;
  @include pf-l-flex--m-align-content-space-between;
  @include pf-l-flex--m-align-content-space-around;
  @include pf-l-flex--m-align-content-normal;

  // Align self
  @include pf-l-flex--m-align-self-flex-start;
  @include pf-l-flex--m-align-self-flex-end;
  @include pf-l-flex--m-align-self-center;
  @include pf-l-flex--m-align-self-baseline;
  @include pf-l-flex--m-align-self-stretch;

  // Alignment
  @include pf-l-flex--m-align-right;
  @include pf-l-flex--m-align-left;

  // Flex fitting
  @include pf-l-flex--m-grow;
  @include pf-l-flex--m-shrink;
  @include pf-l-flex--m-align;
  @include pf-l-flex--m-full-width;
  @include pf-l-flex--m-flex-1;
  @include pf-l-flex--m-flex-2;
  @include pf-l-flex--m-flex-3;
  @include pf-l-flex--m-flex-4;
  @include pf-l-flex--m-flex-default;
  @include pf-l-flex--m-flex-none;

  // stylelint-disable at-rule-empty-line-before
  // Spacer loops
  @each $spacer, $spacer-value in $pf-l-flex--spacer-map { &.pf-m-space-items-#{$spacer} { @include pf-l-flex--m-space-items($spacer, $spacer-value); } }
  @each $spacer, $spacer-value in $pf-l-flex--spacer-map { &.pf-m-spacer-#{$spacer} { @include pf-l-flex--m-spacer($spacer, $spacer-value); } }

  // Gap
  @each $spacer, $spacer-value in $pf-l-flex--spacer-map { &.pf-m-gap-#{$spacer} { @include pf-l-flex--m-gap($spacer, $spacer-value); } }
  @each $spacer, $spacer-value in $pf-l-flex--spacer-map { &.pf-m-row-gap-#{$spacer} { @include pf-l-flex--m-row-gap($spacer, $spacer-value); } }
  @each $spacer, $spacer-value in $pf-l-flex--spacer-map { &.pf-m-column-gap-#{$spacer} { @include pf-l-flex--m-column-gap($spacer, $spacer-value); } }
  // stylelint-enable
}

// stylelint-disable no-duplicate-selectors, max-nesting-depth
// Item
.pf-l-flex > * {
  // reset spacer
  --pf-l-flex--spacer: var(--pf-l-flex--spacer-base);

  order: var(--pf-l-flex--item--Order);
  min-width: 0;
  max-width: 100%;
  margin-right: var(--pf-l-flex--spacer);

  // abstract these as well

  // don't set base value for --pf-l-flex--item--Order as it defaults to 0
  @media screen and (min-width: $pf-global--breakpoint--sm) {
    order: var(--pf-l-flex--item--Order-on-sm, var(--pf-l-flex--item--Order));
  }

  @media screen and (min-width: $pf-global--breakpoint--md) {
    order: var(--pf-l-flex--item--Order-on-md, var(--pf-l-flex--item--Order-on-sm, var(--pf-l-flex--item--Order)));
  }

  @media screen and (min-width: $pf-global--breakpoint--lg) {
    order: var(--pf-l-flex--item--Order-on-lg, var(--pf-l-flex--item--Order-on-md, var(--pf-l-flex--item--Order-on-sm, var(--pf-l-flex--item--Order))));
  }

  @media screen and (min-width: $pf-global--breakpoint--xl) {
    order: var(--pf-l-flex--item--Order-on-xl, var(--pf-l-flex--item--Order-on-lg, var(--pf-l-flex--item--Order-on-md, var(--pf-l-flex--item--Order-on-sm, var(--pf-l-flex--item--Order)))));
  }

  @media screen and (min-width: $pf-global--breakpoint--2xl) {
    order: var(--pf-l-flex--item--Order-on-2xl, var(--pf-l-flex--item--Order-on-xl, var(--pf-l-flex--item--Order-on-lg, var(--pf-l-flex--item--Order-on-md, var(--pf-l-flex--item--Order-on-sm, var(--pf-l-flex--item--Order))))));
  }

  &:last-child {
    --pf-l-flex--spacer: 0;
  }
}

// stylelint-disable no-invalid-position-at-import-rule
// @import "./flex-responsive-modifiers"; // call after all other modifiers
// stylelint-enable
