// Don't remove this magic comment. See gulpfile.js.
// @import '../../sass-utilities/all';
// @debug $toolbar; // check your variable names located in src/patternfly/sass-utilities/component-namespaces.scss
$pf-v5-c-toolbar--spacer-map: build-spacer-map('none', 'sm', 'md', 'lg');
$pf-v5-c-toolbar--inset-map: build-spacer-map('none', 'sm', 'md', 'lg', 'xl', '2xl');
$pf-v5-c-toolbar--align-items--alignments: ('stretch', 'baseline', 'start', 'center', 'end');

:root {
  --#{$toolbar}--AlignItems--base: flex-start;
  --#{$toolbar}--ColumnGap: var(--pf-t--global--spacer--sm);
  --#{$toolbar}--RowGap: var(--pf-t--global--spacer--sm);
  --#{$toolbar}--Padding: var(--pf-t--global--spacer--sm);
  --#{$toolbar}--PaddingInlineStart: var(--#{$toolbar}--Padding);
  --#{$toolbar}--PaddingInlineEnd: var(--#{$toolbar}--Padding);
  --#{$toolbar}--PaddingBlockStart: var(--#{$toolbar}--Padding);
  --#{$toolbar}--PaddingBlockEnd: var(--#{$toolbar}--Padding);

  // Group
  --#{$toolbar}__group--RowGap: var(--#{$toolbar}--RowGap);
  --#{$toolbar}__group--ColumnGap: var(--#{$toolbar}--ColumnGap);

  // Item
  --#{$toolbar}__item--RowGap: var(--#{$toolbar}--RowGap);
  --#{$toolbar}__item--ColumnGap: var(--#{$toolbar}--ColumnGap);
  --#{$toolbar}__item--AlignItems: baseline;
  --#{$toolbar}--m-full-height__item--AlignItems: baseline;

  // Sticky
  --#{$toolbar}--m-sticky--ZIndex: var(--#{$pf-global}--ZIndex--xs);
  --#{$toolbar}--m-sticky--BoxShadow: var(--pf-t--global--box-shadow--md--bottom);

  // Insets
  --#{$toolbar}--m-page-insets--inset: var(--pf-t--global--spacer--md);

  // Expandable content
  --#{$toolbar}__expandable-content--ZIndex: var(--#{$pf-global}--ZIndex--sm);
  --#{$toolbar}__expandable-content--BoxShadow: var(--pf-t--global--box-shadow--md--bottom);
  --#{$toolbar}__expandable-content--BackgroundColor: var(--#{$toolbar}--BackgroundColor);

  // Expand all
  --#{$toolbar}__expand-all-icon--Rotate: 0;
  --#{$toolbar}__expand-all-icon--Transition: var(--#{$pf-global}--Transition);
  --#{$toolbar}__item--m-expand-all--m-expanded__expand-all-icon--Rotate: 90deg;

  // Label
  --#{$toolbar}__item--m-label--FontWeight: var(--pf-t--global--font--weight--body--bold);

  // Input
  --#{$toolbar}__item--m-form-control--TranslateY: var(--pf-v5-global--spacer--form-element);

  // Divider
  --#{$toolbar}--c-divider--m-vertical--spacer: var(--#{$toolbar}--spacer--base);
}

.#{$toolbar} {
  position: relative;
  display: grid;
  padding-block-start: var(--#{$toolbar}--PaddingBlockStart);
  padding-block-end: var(--#{$toolbar}--PaddingBlockEnd);
  padding-inline-start: var(--#{$toolbar}--PaddingInlineStart);
  padding-inline-end: var(--#{$toolbar}--PaddingInlineEnd);
  background-color: var(--#{$toolbar}--BackgroundColor);

  &.pf-m-page-insets {
    --#{$toolbar}--Padding: var(--#{$toolbar}--m-page-insets--inset);
  }

  &.pf-m-sticky {
    position: sticky;
    z-index: var(--#{$toolbar}--m-sticky--ZIndex);
    box-shadow: var(--#{$toolbar}--m-sticky--BoxShadow);
  }

  &.pf-m-static {
    .#{$toolbar}__content {
      position: static;
    }

    .#{$toolbar}__expandable-content {
      position: absolute;
    }
  }
}

.#{$toolbar},
.#{$toolbar}__content,
.#{$toolbar}__content-section,
.#{$toolbar}__expandable-content {
  row-gap: var(--#{$toolbar}--RowGap);
  column-gap: var(--#{$toolbar}--ColumnGap);
}

.#{$toolbar},
.#{$toolbar}__content {
  display: grid;
}

.#{$toolbar}__content-section,
.#{$toolbar}__group,
.#{$toolbar}__item {
  display: flex;
}


// // TODO: move chip-container to group/item, nested within content-section
// .#{$toolbar}__content,
// .#{$toolbar}__content-section,
// .#{$toolbar}__group {
//   &.pf-m-chip-container {
//     display: flex;
//     flex: 1;
//     width: 100%;
//   }
// }

.#{$toolbar}__content-section {
  align-items: start;
  flex-wrap: wrap;
}

.#{$toolbar}__group,
.#{$toolbar}__item {
  align-self: stretch;
}

.#{$toolbar}__group,
.#{$toolbar}__item {
  flex-wrap: wrap;

  &.pf-m-overflow-container {
    flex: 1;
    overflow: hidden;
  }

  &.pf-m-align-end {
    margin-inline-start: auto;
  }

  &.pf-m-align-start {
    margin-inline-start: 0;
  }

  &.pf-m-nowrap {
    flex-wrap: nowrap;
  }

  &.pf-m-wrap {
    flex-wrap: wrap;
  }
}

// Item
.#{$toolbar}__item {
  @include pf-v5-hidden-visible(var(--#{$toolbar}__item--Display));

  row-gap: var(--#{$toolbar}__item--RowGap);
  column-gap: var(--#{$toolbar}__item--ColumnGap);
  align-items: var(--#{$toolbar}__item--AlignItems);

  // Expand
  &.pf-m-expand-all.pf-m-expanded {
    --#{$toolbar}__expand-all-icon--Rotate: var(--#{$toolbar}__item--m-expand-all--m-expanded__expand-all-icon--Rotate);
  }

  // Label
  &.pf-m-label {
    font-weight: var(--#{$toolbar}__item--m-label--FontWeight);
  }

  // Total items
  &.pf-m-pagination {
    margin-inline-start: auto;

    .#{$pagination} {
      flex-wrap: nowrap;
    }
  }
}

// Group
.#{$toolbar}__group {
  row-gap: var(--#{$toolbar}__group--RowGap);
  column-gap: var(--#{$toolbar}__group--ColumnGap);
  align-items: baseline;
  align-self: stretch;

  // Icon button group
  &.pf-m-icon-button-group,
  &.pf-m-filter-group {
    column-gap: 0;
  }

  &.pf-m-filter-group {
    flex-wrap: nowrap;
  }

  // Toggle group modifiers
  &.pf-m-toggle-group {
    &.pf-m-hide {
      display: none;

      .#{$toolbar}__toggle {
        display: inline-block;
      }
    }

    &.pf-m-show {
      display: flex;

      .#{$toolbar}__toggle {
        display: none;
      }
    }
  }
}

// Content
.#{$toolbar}__content {
  position: relative;
}

// Expandable content
.#{$toolbar}__expandable-content {
  position: absolute;
  z-index: var(--#{$toolbar}__expandable-content--ZIndex);
  display: none;
  width: 100%;
  background-color: var(--#{$toolbar}__expandable-content--BackgroundColor);
  box-shadow: var(--#{$toolbar}__expandable-content--BoxShadow);

  @media screen and (min-width: $pf-v5-global--breakpoint--lg) {
    position: static;
    box-shadow: none;
  }

  &.pf-m-expanded,
  .#{$toolbar}__group {
    display: grid;
  }
}

// Expand all
.#{$toolbar}__expand-all-icon {
  display: inline-block;
  transition: var(--#{$toolbar}__expand-all-icon--Transition);
  transform: rotate(var(--#{$toolbar}__expand-all-icon--Rotate));

  @include pf-v5-mirror-inline-on-rtl; // - TODO: mirror this icon in breaking change
}

// Alignment modifiers
@each $alignment in $pf-v5-c-toolbar--align-items--alignments {
  .#{$toolbar}__group.pf-m-align-items-#{$alignment} {
    // if toolbar__group children are not toolbar__items, align them to baseline
    > :not(:where(.#{$toolbar}__item)) { // use :where psuedo to avoid increasing specificity
      align-self: #{$alignment};
    }

    // for toolbar__items to align correctly, they must retain align-self: stretch
    > .#{$toolbar}__item {
      align-items: #{$alignment};
    }
  }

  .#{$toolbar}__group.pf-m-align-self-#{$alignment},
  .#{$toolbar}__item.pf-m-align-self-#{$alignment} {
    align-self: #{$alignment};
  }
}

// Row and column gap modifiers
@each $spacer, $spacer-value in $pf-v5-c-toolbar--spacer-map {
  .#{$toolbar} {
    .pf-m-column-gap-#{$spacer} {
      column-gap: #{$spacer-value};
    }

    .pf-m-row-gap-#{$spacer} {
      column-gap: #{$spacer-value};
    }
  }

  .#{$toolbar}__group,
  .#{$toolbar}__item {
    .pf-m-margin-inline-start#{$spacer} {
      margin-inline-start: #{$spacer-value};
    }

    .pf-m-margin-inline-end#{$spacer} {
      margin-inline-end: #{$spacer-value};
    }
  }
}

// Inset modifiers
@each $inset, $inset-value in $pf-v5-c-toolbar--inset-map {
  .#{$toolbar} .pf-m-inset-#{$inset} {
    --#{$toolbar}--inset: #{$inset-value};
  }
}

@if $include-toolbar-media-query-css {
  $pf-v5-c-toolbar--breakpoint-map: build-breakpoint-map('sm', 'md', 'lg', 'xl', '2xl');

  // Toggle group modifiers
  @each $breakpoint, $breakpoint-value in $pf-v5-c-toolbar--breakpoint-map {
    $breakpoint-name: -on-#{$breakpoint};

    @include pf-v5-apply-breakpoint($breakpoint) {
      .#{$toolbar}__group,
      .#{$toolbar}__item {
        &.pf-m-hide#{$breakpoint-name} {
          display: none;

          .#{$toolbar}__toggle {
            display: inline-block;
          }
        }

        &.pf-m-show#{$breakpoint-name} {
          display: flex;

          .#{$toolbar}__toggle {
            display: none;
          }
        }
      }

      // Align end
      .#{$toolbar}__item.pf-m-align-end#{$breakpoint-name},
      .#{$toolbar}__group.pf-m-align-end#{$breakpoint-name} {
        margin-inline-start: auto;
      }

      // Align start
      .#{$toolbar}__item.pf-m-align-start#{$breakpoint-name},
      .#{$toolbar}__group.pf-m-align-start#{$breakpoint-name} {
        margin-inline-start: 0;

        & ~ .pf-m-pagination {
          margin-inline-start: auto;
        }
      }

      .#{$toolbar}__content-section,
      .#{$toolbar}__group,
      .#{$toolbar}__item {
        &.pf-m-nowrap#{$breakpoint-name} {
          flex-wrap: nowrap;
        }

        &.pf-m-wrap#{$breakpoint-name} {
          flex-wrap: wrap;
        }
      }

      @each $alignment in $pf-v5-c-toolbar--align-items--alignments {
        .#{$toolbar}__group.pf-m-align-items-#{$alignment}#{$breakpoint-name} {
          // if toolbar__group children are not toolbar__items, align them to baseline
          > :not(:where(.#{$toolbar}__item)) { // use :where psuedo to avoid increasing specificity
            align-self: #{$alignment};
          }

          // for toolbar__items to align correctly, they must retain align-self: stretch
          > .#{$toolbar}__item {
            align-items: #{$alignment};
          }
        }

        .#{$toolbar}__group.pf-m-align-self-#{$alignment}#{$breakpoint-name},
        .#{$toolbar}__item.pf-m-align-self-#{$alignment}#{$breakpoint-name} {
          align-self: #{$alignment};
        }
      }


      @each $gap, $gap-value in $pf-v5-c-toolbar--spacer-map {
        .#{$toolbar} .pf-m-gap-#{$gap}#{$breakpoint-name} {
          column-gap: #{$gap-value};
        }
      }
    }

    @each $gap, $gap-value in $pf-v5-c-toolbar--spacer-map {
      .#{$toolbar}__group,
      .#{$toolbar}__item {
        .pf-m-margin-inline-start#{$gap}#{$breakpoint-name} {
          margin-inline-start: #{$gap-value};
        }

        .pf-m-margin-inline-end#{$gap}#{$breakpoint-name} {
          margin-inline-end: #{$gap-value};
        }
      }
    }

    @each $inset, $inset-value in $pf-v5-c-toolbar--inset-map {
      &.pf-m-inset-#{$inset}#{$breakpoint-name} {
        --#{$toolbar}--inset: #{$inset-value};
      }
    }
  }
}

// TODO: remove this, replace w/resize observer
$pf-v5-c-toolbar--breakpoint-map: build-breakpoint-map('sm', 'md', 'lg', 'xl', '2xl');

@each $breakpoint, $breakpoint-value in $pf-v5-c-toolbar--breakpoint-map {
  $breakpoint-name: -on-#{$breakpoint};

  @include pf-v5-apply-breakpoint($breakpoint) {
    .#{$toolbar}__group,
    .#{$toolbar}__item {
      &.pf-m-hide#{$breakpoint-name} {
        display: none;

        .#{$toolbar}__toggle {
          display: inline-block;
        }
      }

      &.pf-m-show#{$breakpoint-name} {
        display: flex;

        .#{$toolbar}__toggle {
          display: none;
        }
      }
    }
  }
}